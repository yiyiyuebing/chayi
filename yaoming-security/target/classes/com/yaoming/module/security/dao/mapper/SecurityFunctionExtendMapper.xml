<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yaoming.module.security.dao.SecurityFunctionExtendMapper" >
	
	<resultMap id="SecurityFunctionExtendResultMap" type="com.yaoming.module.security.dao.po.SecurityFunctionExtendPo" extends="com.yaoming.module.security.dao.base.SecurityFunctionMapper.BaseResultMap">
		<result column="role_ids" property="roleIds" jdbcType="VARCHAR" />
	</resultMap>

	<select id="selectAll" resultMap="SecurityFunctionExtendResultMap">
		select a.*, ifnull(b.role_ids, '') from _security_function a left join (
			select function_id, group_concat(role_id) role_ids from _security_role_function group by function_id
		) b on a.id=b.function_id
	</select>

	<select id="selectByParentId" resultMap="SecurityFunctionExtendResultMap">
		select a.*, group_concat(b.role_id) role_ids from _security_function a 
		left join _security_role_function b on a.id=b.function_id 
		where parent_id=#{parentId} 
		order by a.`index` asc, a.id asc;
	</select>

	<select id="selectByRoleName" resultMap="SecurityFunctionExtendResultMap">
		select b.* from _security_role_function a 
		left join _security_function b on a.function_id=b.id
		left join _security_role c on a.role_id=c.id
		where c.`name`=#{roleName}
		order by b.`index` asc, b.id asc;
	</select>
	
	
	<insert id="replace" parameterType="com.yaoming.module.security.dao.base.po.SecurityFunction" >
	  replace into _security_function (
	  	id, 
	  	parent_id, 
	  	`name`, 
	  	`url`, 
	  	`index`, 
	  	note)
	  values (
	  	#{id,jdbcType=BIGINT}, 
	  	#{parentId,jdbcType=BIGINT}, 
	  	#{name,jdbcType=VARCHAR}, 
	  	#{url,jdbcType=VARCHAR}, 
	  	#{index,jdbcType=INTEGER}, 
	  	#{note,jdbcType=VARCHAR})
	</insert>
  
	<update id="updateByOldId" >
	  update _security_function
	  set parent_id = #{parentId,jdbcType=BIGINT},
	    `name` = #{name,jdbcType=VARCHAR},
	    `url` = #{url,jdbcType=VARCHAR},
	    `index` = #{index,jdbcType=INTEGER},
	    note = #{note,jdbcType=VARCHAR},
	    id = #{id,jdbcType=BIGINT}
	  where id = #{oldId,jdbcType=BIGINT}
	</update>
</mapper>