package pub.makers.shop.store.service;

import com.alibaba.dubbo.config.annotation.Service;
import com.google.common.collect.Lists;
import org.apache.commons.collections.ListUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import pub.makers.daotemplate.vo.Conds;
import pub.makers.shop.store.entity.StoreLevel;
import pub.makers.shop.store.entity.Subbranch;
import pub.makers.shop.store.vo.StoreLevelVo;
import pub.makers.shop.tradeGoods.entity.Image;

import java.util.*;

/**
 * Created by dy on 2017/6/1.
 */
@Service(version = "1.0.0")
public class StoreLevelMgrBizServiceImpl implements StoreLevelMgrBizService {

    private String findStoreLevelByShopIdSql = "select sl.* from store_level sl join store_subbranch ss on sl.level_Id = ss.level_id";

    @Autowired
    private StoreLevelService storeLevelService;
    @Autowired
    private SubbranchService subbranchService;
    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    public List<StoreLevelVo> findAllStoreLevel() {
        List<StoreLevel> storeLevels = storeLevelService.list(Conds.get().eq("statue", 1));
        List<StoreLevelVo> storeLevelVos = new ArrayList<StoreLevelVo>();
        for (StoreLevel storeLevel : storeLevels) {
            StoreLevelVo storeLevelVo = new StoreLevelVo(storeLevel);
            storeLevelVos.add(storeLevelVo);
        }
        return storeLevelVos;
    }

    @Override
    public StoreLevel findStoreLevelBySubbranchId(String subbranchId) {
        String findStoreLevelByShopIdStmt = findStoreLevelByShopIdSql;
        RowMapper<StoreLevel> rowMapper = ParameterizedBeanPropertyRowMapper.newInstance(StoreLevel.class);
        findStoreLevelByShopIdStmt = findStoreLevelByShopIdStmt + " where ss.id = ?";
        List<StoreLevel> storeLevelList = jdbcTemplate.query(findStoreLevelByShopIdStmt, rowMapper, subbranchId);
        if (!storeLevelList.isEmpty()) {
            return storeLevelList.get(0);
        }
        return null;
    }

    @Override
    public Map<String, StoreLevel> getStoreLevelMap(Set<String> subbranchIdSet) {
        RowMapper<StoreLevel> rowMapper = ParameterizedBeanPropertyRowMapper.newInstance(StoreLevel.class);
        String sql = "";
        if (subbranchIdSet.size() > 0) {
            sql = findStoreLevelByShopIdSql + " where ss.id in ("+ StringUtils.join(Lists.newArrayList(subbranchIdSet), ",") +")";
        } else {
            return new HashMap<String, StoreLevel>();
        }
        List<StoreLevel> storeLevelList = jdbcTemplate.query(sql, rowMapper);
        List<Subbranch> subbranchList = subbranchService.list(Conds.get().in("id", Lists.newArrayList(subbranchIdSet)));
        Map<String, StoreLevel> storeLevelMap = new HashMap<String, StoreLevel>();
        for (Subbranch subbranch : subbranchList) {
            for (StoreLevel storeLevel : storeLevelList) {
                if (storeLevel.getLevelId().equals(subbranch.getLevelId())) {
                    if (storeLevelMap.get(subbranch.getId() + "") != null) {
                        continue;
                    }
                    storeLevelMap.put(subbranch.getId() + "", storeLevel);
                }
            }
        }
        return storeLevelMap;
    }
}
